#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// ロータリーエンコーダ スクロール量定義

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  INT1         // (backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _

// マウスクリック操作時AML動作定義

&mkp_input_listener { input-processors = <&zip_temp_layer 4 250>; };

// &trackball {
//    scroll-layers = <2>;
//    automouse-layer = <4>;
//    arrows {
//        layers = <3>;
//        bindings =
//            <&kp RIGHT_ARROW>,
//            <&kp LEFT_ARROW>,
//            <&kp UP_ARROW>,
//            <&kp DOWN_ARROW>;
//        tick = <10>;
//        wait-ms = <5>;
//        tap-ms = <5>;
//    };
// };

&lt {
    hold-while-undecided;
    flavor = "hold-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R          &kp T                                           &kp Y          &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D         &kp F          &kp G        &kp LA(F)            &kp JP_TILDE  &kp H          &kp J  &kp K      &kp L    &kp ENTER
&kp Z      &kp X         &kp C         &kp V          &kp B        &kp LS(JP_EISU)      &kp INS       &kp N          &kp M  &kp COMMA  &kp DOT  &kp LEFT_SHIFT
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &lt 3 JP_ZKHK  &lt 1 SPACE  &lt 2 ESCAPE         &kp DELETE    &kp BACKSPACE                             &mt JP_TILDE MINUS
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        SYMBOL_FUNCTION {
            bindings = <
&trans        &kp DOLLAR   &kp LESS_THAN  &kp GREATER_THAN  &kp JP_AT                                  &kp F1   &kp F2   &kp F3   &kp F4   &kp F5
&kp JP_SEMI   &kp JP_YEN   &kp JP_LPAR    &kp JP_RPAR       &kp JP_HASH   &trans           &kp JP_DQT  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10
&kp JP_COLON  &kp JP_AMPS  &kp JP_LBKT    &kp JP_RBKT       &kp JP_PRCNT  &kp JP_HASH      &kp JP_SQT  &kp F11  &kp F12  &kp F13  &kp F14  &kp EXCLAMATION
&trans        &trans       &trans         &trans            &trans        &trans           &trans      &trans                              &kp QUESTION
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        ARROW_NUM {
            bindings = <
&trans        &kp PAGE_UP     &kp UP_ARROW    &kp PAGE_DOWN    &trans                                  &kp JP_ASTRK  &kp N7  &kp N8  &kp N9  &kp JP_PLUS
&kp JP_SEMI   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp JP_HASH   &trans      &kp JP_CARET  &kp SLASH     &kp N4  &kp N5  &kp N6  &kp MINUS
&kp JP_COLON  &kp HOME        &trans          &kp END          &kp JP_PRCNT  &trans      &kp JP_EQUAL  &kp JP_UNDER  &kp N1  &kp N2  &kp N3  &kp N0
&trans        &trans          &trans          &trans           &trans        &trans      &trans        &trans                                &kp PERIOD
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        SHORTCUT {
            bindings = <
&kp LA(TAB)         &kp LA(PRINTSCREEN)  &kp LS(LC(A))    &kp PRINTSCREEN    &trans                      &trans  &trans    &trans    &trans    &trans
&kp LC(T)           &kp LC(F4)           &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)  &kp LC(LS(TAB))  &kp LC(TAB)        &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans              &trans               &trans           &trans             &trans  &trans      &trans  &trans                                &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
