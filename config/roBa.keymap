#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R  &kp T                                      &kp Y  &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D         &kp F  &kp G      &kp RC(C_PAUSE)      &kp TILDE  &kp H  &kp J  &kp K      &kp L    &kp ENTER
&kp Z      &kp X         &kp C         &kp V  &kp B      &kp ESCAPE           &kp MINUS  &kp N  &kp M  &kp COMMA  &kp DOT  &kp BACKSPACE
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &mo 3  &kp SPACE  &kp LEFT_SHIFT       &mo 1      &mo 2                             &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        SYMBOL_FUNCTION {
            bindings = <
&kp EXCLAMATION  &kp DOLLAR     &kp LESS_THAN         &kp GREATER_THAN       &kp AT_SIGN                                                  &kp F1   &kp F2   &kp F3   &kp F4   &kp F5
&kp COLON        &kp PERCENT    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SLASH             &trans              &kp DOUBLE_QUOTES  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10
&kp SEMI         &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp NON_US_BACKSLASH  &kp HASH            &kp SINGLE_QUOTE   &kp F11  &kp F12  &kp F13  &kp F14  &kp QUESTION
&kp LCTRL        &kp LEFT_WIN   &kp LEFT_ALT          &trans                 &kp SPACE             &kp LEFT_SHIFT      &trans             &trans                              &trans
            >;
        };

        ARROW_NUM {
            bindings = <
&trans  &kp PAGE_UP     &kp UP_ARROW    &kp PAGE_DOWN    &trans                                    &kp ASTERISK  &kp N7  &kp N8  &kp N9  &kp PLUS
&trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans     &trans              &trans     &kp SLASH     &kp N4  &kp N5  &kp N6  &kp MINUS
&kp Z   &kp X           &kp C           &kp V            &trans     &trans              &kp EQUAL  &kp UNDER     &kp N1  &kp N2  &kp N3  &kp N0
&trans  &trans          &trans          &trans           &kp SPACE  &kp LEFT_SHIFT      &trans     &trans                                &kp PERIOD
            >;
        };

        SHORTCUT {
            bindings = <
&trans     &trans      &trans           &trans             &trans                             &trans  &trans              &kp LC(LS(A))        &kp LA(PRINTSCREEN)  &kp PRINTSCREEN
&kp LC(T)  &kp LC(F4)  &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &kp LC(LS(W))  &trans      &trans  &trans  &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)  &kp LC(TAB)          &kp LC(LS(TAB))
&trans     &trans      &trans           &trans             &trans         &trans      &trans  &trans  &trans              &trans               &trans               &trans
&trans     &trans      &trans           &trans             &trans         &trans      &trans  &trans                                                                &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
